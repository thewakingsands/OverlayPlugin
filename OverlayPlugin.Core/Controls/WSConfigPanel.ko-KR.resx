<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <data name="startBtn.Text" xml:space="preserve">
    <value>시작</value>
  </data>

  <data name="genSslBtn.Text" xml:space="preserve">
    <value>SSL 인증서 발급</value>
  </data>

  <data name="label1.Text" xml:space="preserve">
    <value>IP 주소:</value>
  </data>

  <data name="stopBtn.Text" xml:space="preserve">
    <value>중지</value>
  </data>

  <data name="logDisplay.Text" xml:space="preserve">
    <value>SSL를 허용하려면 SSL 인증서가 필요합니다.

위의 버튼을 눌러 인증서를 새로 발급하거나, 인증서가 있는 경우 비밀번호를 changeit으로 설정한 OverlayPluginSSL.p12 파일을 %Appdata%\Advanced Combat Tracker\Config 폴더에 보관하세요.

설정이 끝나면 ACT를 다시 시작하시고, 인증서 준비가 완료되면 SSL을 활성화할 수 있습니다.</value>
  </data>

  <data name="sslBox.Text" xml:space="preserve">
    <value>SSL 허용</value>
  </data>

  <data name="label2.Text" xml:space="preserve">
    <value>포트:</value>
  </data>

  <data name="label3.Text" xml:space="preserve">
    <value>상태:</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>URL:</value>
  </data>
  <data name="ctxMenuLinkCopy.Text" xml:space="preserve">
    <value>복사</value>
  </data>
  <data name="lblUrlConfidentWarning.Text" xml:space="preserve">
    <value>오버레이가 ACTWebSocket을 지원하지 않는다면, 이 주소는 작동하지 않을 수도 있습니다.</value>
  </data>
  <data name="statusLabel.Text" xml:space="preserve">
    <value>알 수 없음</value>
  </data>
  <data name="tunnelPage.Text" xml:space="preserve">
    <value>공유 오버레이</value>
  </data>
  <data name="settingsPage.Text" xml:space="preserve">
    <value>Stream/Local 오버레이</value>
  </data>
  <data name="simpStatusLabel.Text" xml:space="preserve">
    <value>상태:</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>오버레이 :</value>
  </data>
  <data name="urlGeneratorBox.Text" xml:space="preserve">
    <value>URL 생성기</value>
  </data>
  <data name="regionLabel.Text" xml:space="preserve">
    <value>지역:</value>
  </data>
  <data name="simpStartBtn.Text" xml:space="preserve">
    <value>시작</value>
  </data>
  <data name="simpStopBtn.Text" xml:space="preserve">
    <value>중지</value>
  </data>
  <data name="introPage.Text" xml:space="preserve">
    <value>소개</value>
  </data>
  <data name="lblWsserverIntro.Text" xml:space="preserve">
    <value>다음은 두 탭에 대한 간단한 설명입니다.

Stream/Local 오버레이: 이 탭을 통해 WSServer를 시작하면 이 PC에서 생성된 URL을 사용할 수 있습니다(예: OBS, XL의 오버레이 플러그인 등). 네트워크와 SSL에 대해 조금 알고 있다면 LAN에 있는 다른 장치에서도 이 작업을 수행할 수 있지만 일반적으로 공유 오버레이 탭이 사용하기 훨씬 쉽기 때문에, 이를 위해 공유 오버레이 탭을 사용하는 것이 좋습니다.

공유 오버레이: 이 탭을 통해 WSServer를 시작하면 인터넷에 연결된 모든 장치(휴대폰, 태블릿, 친구의 PC 등)에서 생성된 URL을 사용할 수 있습니다. 이 링크를 다른 사람들과 공유할 수 있습니다.

마지막으로 WSServer가 Stream/Local 오버레이 탭을 통해 시작되면 ACT 시작 시 자동으로 다시 시작됩니다. 공유 오버레이 탭을 통해 시작한 경우 매번 새 URL을 받게 되므로 자동으로 시작되지 않습니다. 참고: 이것이 귀찮다면 ACT Discord(또는 OverlayPlugin의 GitHub 저장소)에서 문제를 해결하도록 요청하세요. 이 문제를 해결할 수 있는 방법이 있지만 이 기능을 원하는 사람이 몇 명인지 잘 모르겠습니다.
</value>
  </data>
</root>